* APP的HTML静态资源加载优化
** 离线包方案
*** 工程
**** 后端使用工具，把相关业务的页面的资源打包成文件，并加密/签名
**** 客户端根据配置表，在自定义时间去拉取离线包，并解压/加密/校验
**** 根据配置表，打开某一个业务时转接到打开离线包的入口页面
**** 拦截网络请求，对于离线包已经有的文件，直接读取离线包数据返回，否则走http协议缓存逻辑
**** 离线包更新，根据版本号，后台下发两个版本间的diff数据，客户端合并，增量更新
*** 优点
**** 避免了文件分散管理，容易把资源按照功能模块下发
** WebView缓存
*** 工程
**** 由于客户端可以拦截所有请求，首次请求HTML文件后缓存数据，第二次不发请求，直接使用缓存
**** 如何更新缓存？客户端可以自由控制，可以在使用本地缓存之后，再在后台发起请求更新缓存；也可以APP启动之后某个时机，发起请求更新
*** 优点
**** HTML文件也缓存了，所有资源都可以直接本地读取，优化了首屏启动速度
*** 缺点
**** 缓存不可控
***** 缓存由webview控制，无法控制其缓存逻辑
****** 清理缓存逻辑不可控，缓存空间有限，缓存大图片之后，可能导致HTML/JS/CSS缓存被清除
****** 磁盘IO无法控制，无法从磁盘预加载到内存
**** 第一次加载体验较差
**** 更新体验不好，每次更新全量下载
**** 无法防止劫持，HTML被运营商劫持，将长时间劫持页面
*** 解决缺点方案
**** 下面解决方案繁琐，原因在于html和资源文件较分散，管理困难
**** 配置预加载列表，在APP启动或某些时机去提前请求，列表可能非常大
**** 客户端接管所有缓存，不使用webview默认逻辑，自行实现缓存机制
**** 可以针对每个HTML和资源文件做增量更新，实现和较麻烦
**** 使用https防止劫持
** 前端优化
*** 工程
**** 降低请求数量：合并资源
**** 减少资源体积：gzip压缩，webp
**** 加快请求速度：预解析DNS，减少域名数，并行加载，CDN分发
**** 缓存：HTTP缓存
**** 渲染：pipeline，服务器渲染，js/css加载顺序
*** 原理
**** HTTP协议强制缓存和协商缓存
***** Cache-Control和Expires
***** If-Modifed-Since和ETag
*** 缺点
**** 只能缓存JS/CSS和图片，无法缓存HTML，弱网络情况下白屏时间会很长
**** HTML缓存不好处理，如果Expire的max-age时间过长，则长时间使用本地缓存，短了，导致要发请求
* 基础知识补充
** 一个页面不宜包含过多的域名，DNS解析会花费较多时间
*** 解决办法
**** 本机的DNS缓存，Chrome只有1分钟
**** DNS预解析
***** meta标签
#+BEGIN_SRC html
<meta http-equiv="x-dns-prefetch-control" content="on" />
#+END_SRC
***** link的rel属性
#+BEGIN_SRC html
<link rel="dns-prefetch" href="http://ke.qq.com/" />
#+END_SRC
